

// Here we define dependencies we need for the program
var fs = require('fs'); // fs stands for the File System of the machine 
const Path = require("path"); // Allows natively formatting file paths
const axios = require("axios");
(async () => {
// This file defines the logic and 
// utilization of the previously
// generated population storage files.

// Our study has a total duration of
// 24 months or two years. We will
// divide this into six stages of
// four months each in which adverse
// effects may develop.

// We detect the population data created by the previous application
// Please make sure that the data folder only contains .json files that 
// were generated by the the first stage population generator written in Go.
let Files  = [];
// We create a folder to store the future final data of the three trials for analysis

let dir = './data/final/'

if (fs.existsSync(dir)) {
    console.log("The folder was found")
    fs.rmdirSync(dir, {recursive: true})
    fs.mkdirSync(dir);
} else {
    console.log("The folder was not found")
    fs.mkdirSync(dir);
}
    
function ThroughDirectory(Directory) {
    fs.readdirSync(Directory).forEach(File => {
        const Absolute = Path.join(Directory, File);
        if (fs.statSync(Absolute).isDirectory()) return ThroughDirectory(Absolute);
        else return Files.push(Absolute);
    });
}

ThroughDirectory("./data/initial/");
// We briefly report that we successfully disovered the population data files.
console.log(`\nThe simulation has now been launched with the following discovered data files:\n\n- ${Files[0]}\n- ${Files[1]}\n- ${Files[2]}\n`)

async function makeGetRequest(themethod) {
    console.log("Making a request")
    await axios.post('http://192.168.1.254:3000/probability', {
        method: String(themethod),
      })
    let data = await res.data
    console.log(String(data));
    return data
}

makeGetRequest('ip')


// This is the base function that will choose events based on probability

// We load the adversity event statistic table into memory for later use 
let adversityStatistics = fs.readFileSync('./supplementary/adverse.json');
let adversityParsed = JSON.parse(adversityStatistics);
console.log('Adversity Statistics found at the following file path: ./supplementary/adverse.json')

// We use Binomial Probability to consider the amount of event opportunities may happen. Since the 24 month period
// is being divided into six stages of four months each, there are six opportunities to encounter adverse effects

// We define this to run for each of the three trial data files
Files.forEach(function(datafile, index) {
    let healthyCounter = []
    let nonhealthyCounter = []

    trialData = JSON.parse(fs.readFileSync(Files[index], "utf8"));
    // Create a container to store the information for the simulation
    // First create the file for this trial

    for (item in trialData) {
       // Here we run the simulation logic for each patient of the running trial
       // We do this in the previously mentioned six stages representing each four months
        let experienceAdverseEvents = false

        // Here we store the results of any adverse events for the stages to later document.
       stageResults = []
       healthStageResults = []

       
            // Here we commence possible health improvements depending on 
            // statistical probability.
       

       function fatalitySimulation() {
           // The rate of fatality for a patient undergoing immunotherapy is approximated 
           // to be 0.87%, as compared with that of chemotherapy, 1.28% [Source 21]
            if (trialData[item].medication == 'ipilimumab' || 'nivolumab' ) {
                let weightedoption3 = makeGetRequest('fip')
                if (weightedoption3 == 'fatality') {
                    return true
                } else {
                    return false
                }
            } else if (trialData[item].medication == 'doxycycline') {
                let weightedoption3 = makeGetRequest('fcp')
                if (weightedoption3 == 'fatality') {
                    return true
                } else {
                    return false
                }
            } else {
                let err = 'We could not detect the medication for the following patient: \n' + item
            }
       }
       



       // Create a function to handle any undefined values
        while (stageResults.length < 4) {
           // The simulation functions with different statistical probabilities
           // depending on the medication each patient takes.
           if (trialData[item].medication === 'doxycycline') {
            let weightedoption2 = makeGetRequest('cp')
            if (chemooptions[weightedoption2] == 'adverses') {
                experienceAdverseEvents = true
                // Since age is the greatest determining factor, we define it to have
                // the greatest impact on the probability of adverse events and
                // effectiveness
                if (trialData[item].agegroup == 'pediatric' || 'elderly') {
                    // We take into account the ethnicity variation in previous clinical trials
                    if (trialData[item].gender == 'male') {
                        if (trialData[item].ethnicity == 'Asian') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,23,20];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }
                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,24,19];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'White') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,25,18];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        }
                    } else if (trialData[item].gender == 'female') {

                        if (trialData[item].ethnicity == 'Asian') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,22,21];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,23,20];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'White') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,24,19];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        }
                    }

                } else if (trialData[item].agegroup == 'young' || 'middle') {
                    // We take into account the ethnicity variation in previous clinical trials
                    if (trialData[item].gender == 'male') {
                        if (trialData[item].ethnicity == 'Asian') {
                            // rarities stands for Ipilimumab, Pediatric, Male, Asian
                            // This is the pattern we use to define variability specific variables.
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,26,17];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,27,16];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'White') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [47,28,15];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        }
                    } else if (trialData[item].gender == 'female') {

                        if (trialData[item].ethnicity == 'Asian') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [46,26,18];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [46,27,17];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        } else if (trialData[item].ethnicity == 'White') {
                            var rarities = ["more common", "less common", "rare"];
                            var rarityvalues = [46,28,16];
                            if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                // adversityParsed
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.morecommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.lesscommon);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                function pickRandomAdversity(){
                                    var obj_keys = Object.entries(adversityParsed.rare);
                                    var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                    stageResults.push(String(ran_key[0]))
                                    healthStageResults.push(String(ran_key[1]))
                                }

                                pickRandomAdversity()
                            }
                        }
                    }

                }
            } else if (chemooptions[weightedoption2] == 'nones') { 
                stageResults.push('Healthy')
                healthStageResults.push(0)
            }
            } 
            if (trialData[item].medication === 'ipilimumab' || 'nivolumab') {
                let weightedoption1 = makeGetRequest('ip')

                if (weightedoption1 === 'adverse') {
                    experienceAdverseEvents = true
                    // Since age is the greatest determining factor, we define it to have
                    // the greatest impact on the probability of adverse events and
                    // effectiveness
                    if (trialData[item].agegroup == 'pediatric' || 'elderly') {
                        // We take into account the ethnicity variation in previous clinical trials
                        if (trialData[item].gender == 'male') {
                            if (trialData[item].ethnicity == 'Asian') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [51,43,6];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [51,44,5];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'White') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [51,45,4];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            }
                        } else if (trialData[item].gender == 'female') {

                            if (trialData[item].ethnicity == 'Asian') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [50,43,7];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [50,44,6];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'White') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [50,45,5];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            }
                        }

                    } else if (trialData[item].agegroup == 'young' || 'middle') {
                        // We take into account the ethnicity variation in previous clinical trials
                        if (trialData[item].gender == 'male') {
                            if (trialData[item].ethnicity == 'Asian') {
                                // rarities stands for Ipilimumab, Pediatric, Male, Asian
                                // This is the pattern we use to define variability specific variables.
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [47,26,17];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [47,27,16];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'White') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [47,28,15];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            }
                        } else if (trialData[item].gender == 'female') {

                            if (trialData[item].ethnicity == 'Asian') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [46,26,18];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'Black or African American' || 'Hispanic or Latino') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [46,27,17];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            } else if (trialData[item].ethnicity == 'White') {
                                var rarities = ["more common", "less common", "rare"];
                                var rarityvalues = [46,28,16];
                                if (rarities[eventSimulator(rarityvalues)] == 'more common') {
                                    // adversityParsed
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.morecommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'less common') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.lesscommon);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                } else if (rarities[eventSimulator(rarityvalues)] == 'rare') {
                                    function pickRandomAdversity(){
                                        var obj_keys = Object.entries(adversityParsed.rare);
                                        var ran_key = obj_keys[Math.floor(Math.random() *obj_keys.length)];
                                        stageResults.push(String(ran_key[0]))
                                        healthStageResults.push(String(ran_key[1]))
                                    }

                                    pickRandomAdversity()
                                }
                            }
                        }

                    }
                    // This is the logic that occurs 
                } else if (weightedoption1 === 'none'){ 
                    stageResults.push('Healthy')
                    healthStageResults.push(0)
                }
            }
       } 

       // Store this information in the final container that we prepare documentation
       // in charts and graphs for later.

       let patientinfo = {
        // First we define the previous initial data
        "name": trialData[item].name,
        "agegroup": trialData[item].agegroup,
        "age": trialData[item].age,
        "gender": trialData[item].gender,
        "severity": trialData[item].severity,
        "ethnicity": trialData[item].ethnicity,
        "medication": trialData[item].medication,
        // Now we define the new results in additional properties
        // for later analysis
        "adverseevents": experienceAdverseEvents,
        "fatality": fatalitySimulation(),
        "health": Number(((((100 - healthStageResults[0]) - healthStageResults[1]) - healthStageResults[2]) - healthStageResults[3])),
        // Health between stages
        "stage_1_events": stageResults[0],
        "stage_2_events": stageResults[1],
        "stage_3_events": stageResults[2],
        "stage_4_events": stageResults[3]
       }
       /* if (patientinfo.medication == 'ipilimumab') {
            if (patientinfo.stage_1_events == 'Healthy' & patientinfo.stage_2_events == 'Healthy' & patientinfo.stage_3_events == 'Healthy' & patientinfo.stage_4_events == 'Healthy') {
                healthyCounter.push('Found')
            }
            if (patientinfo.stage_1_events != 'Healthy' || patientinfo.stage_2_events != 'Healthy' || patientinfo.stage_3_events != 'Healthy' || patientinfo.stage_4_events != 'Healthy') {
                nonhealthyCounter.push('Found')
            }
       }  */

        if (trialData[item].medication == 'doxycycline') {
            if (patientinfo.stage_1_events == 'Healthy' & patientinfo.stage_2_events == 'Healthy' & patientinfo.stage_3_events == 'Healthy' & patientinfo.stage_4_events == 'Healthy') {
                healthyCounter.push('Found')
            }
            if (patientinfo.stage_1_events != 'Healthy' || patientinfo.stage_2_events != 'Healthy' || patientinfo.stage_3_events != 'Healthy' || patientinfo.stage_4_events != 'Healthy') {
                nonhealthyCounter.push('Found')
            }
       }  

      

       
       // We proceed to save all the information to a JSON data file for later analysis
       fs.appendFile(`./data/final/results_trial${index + 1}.json`, JSON.stringify(patientinfo, null, 2), function (err) {
            if (err) throw err;
        });
    } 
    console.log('We had this many entries for healthy: ' + healthyCounter.length + ' / 166')
    console.log('We had this many entries for nonhealthy: ' + nonhealthyCounter.length + ' / 166')
    console.log('Non healthy percent is ' + ((nonhealthyCounter.length / 166) * 100) + '%') 
    console.log(`\nTrial ${index + 1} has completed producing the following final results file: data/final/results_${index + 1}.json`)

});
})();