// Here we define dependencies we need for the program
var fs = require('fs'); // fs stands for the File System of the machine 
const Path = require("path"); // Allows natively formatting file paths

// This file defines the logic and 
// utilization of the previously
// generated population storage files.

// Our study has a total duration of
// 24 months or two years. We will
// divide this into six stages of
// four months each in which adverse
// effects may develop.

// We detect the population data created by the previous application
// Please make sure that the data folder only contains .json files that 
// were generated by the the first stage population generator written in Go.
let Files  = [];

function ThroughDirectory(Directory) {
    fs.readdirSync(Directory).forEach(File => {
        const Absolute = Path.join(Directory, File);
        if (fs.statSync(Absolute).isDirectory()) return ThroughDirectory(Absolute);
        else return Files.push(Absolute);
    });
}

ThroughDirectory("./data/");
// We briefly report that we successfully disovered the population data files.
console.log(`\nThe simulation has now been launched with the following discovered data files:\n\n- ${Files[0]}\n- ${Files[1]}\n- ${Files[2]}`)

// This is the base function that will choose events based on probability
function eventSimulator(proabability) {
    var randomchance = Math.random();
    var sum = 0;
    proabability.forEach(function(chance) {
        sum+=chance;
    });
    var chance = 0;
    for(var i=0; i<proabability.length; i++) {
        chance+=proabability[i]/sum;
        if(randomchance<chance) {
            return i;
        }
    }
}
