// Here we define dependencies we need for the program
var fs = require('fs'); // fs stands for the File System of the machine 
const Path = require("path"); // Allows natively formatting file paths

// This file defines the logic and 
// utilization of the previously
// generated population storage files.

// Our study has a total duration of
// 24 months or two years. We will
// divide this into six stages of
// four months each in which adverse
// effects may develop.

// We detect the population data created by the previous application
// Please make sure that the data folder only contains .json files that 
// were generated by the the first stage population generator written in Go.
let Files  = [];

function ThroughDirectory(Directory) {
    fs.readdirSync(Directory).forEach(File => {
        const Absolute = Path.join(Directory, File);
        if (fs.statSync(Absolute).isDirectory()) return ThroughDirectory(Absolute);
        else return Files.push(Absolute);
    });
}

ThroughDirectory("./data/");
// We briefly report that we successfully disovered the population data files.
console.log(`\nThe simulation has now been launched with the following discovered data files:\n\n- ${Files[0]}\n- ${Files[1]}\n- ${Files[2]}\n`)

// This is the base function that will choose events based on probability
function eventSimulator(proabability) {
    var randomchance = Math.random();
    var sum = 0;
    proabability.forEach(function(chance) {
        sum+=chance;
    });
    var chance = 0;
    for(var i=0; i<proabability.length; i++) {
        chance+=proabability[i]/sum;
        if(randomchance<chance) {
            return i;
        }
    }
}

// First we create the probability options model for the severity of the adverse effect based on cited statistics
// 65.82% of immunotherapy patients developed any adverse effects.
var eventProbabilityImmuno = ["adverse", "none"];
var eventProbabilityValuesImmuno = [66, 34];

// 85.19% of chemotherapy patients developed any adverse effects.
var eventProbabilityChemo = ["adverse", "none"];
var eventProbabilityValuesChemo = [85, 15];

// We create an array container to store the future concluding information
let patientTrialOutcome = {}

// We define this to run for each of the three trial data files
Files.forEach(function(datafile, index) {
    console.log(`Running the analysis for trial data: ` + (index + 1))
    trialData = JSON.parse(fs.readFileSync(Files[index], "utf8"));
    for (item in trialData) {
       var patientinfo = []
       // Here we run the simulation logic for each patient of the running trial
       // We do this in the previously mentioned six stages representing each four months
    

       function stageSimulation() {
           // The simulation functions with different statistical probabilities
           // depending on the medication each patient takes.
            if (trialData[item].medication == 'ipilimumab') {
                if (eventProbabilityImmuno[eventSimulator(eventProbabilityValuesImmuno)] == 'adverse') {
                    console.log("There was an adverse event")
                } else {
                    console.log("There was no adverse event")
                }
            } else if (trialData[item].medication == 'nivolumab') {
            } else if (trialData[item].medication == 'doxycycline') {
            }
       }


       for (i = 0; i < 6; i++) {
        stageSimulation()
       }

       // Store this information in the final container that we prepare documentation
       // in charts and graphs for later.

       // patientTrialOutcome.String(item.name) = patientinfo;

    } 
});